import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

public class TicTacToeGUI {

    private JFrame frame;
    private JButton[][] buttons;
    private char currentPlayer;
    private boolean gameEnded;
    private Map<Character, Integer> scores;
    private JLabel xScoreLabel;
    private JLabel oScoreLabel;
    private Random random;

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                TicTacToeGUI window = new TicTacToeGUI();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public TicTacToeGUI() {
        currentPlayer = 'X';
        gameEnded = false;
        scores = new HashMap<>();
        scores.put('X', 0);
        scores.put('O', 0);
        random = new Random();
        initialize();
    }

    private void initialize() {
        frame = new JFrame();
        frame.setTitle("Tic Tac Toe - Player vs Computer");
        
        // Create a custom title panel
        JPanel titlePanel = new JPanel();
        titlePanel.setBackground(new Color(70, 130, 180));
        titlePanel.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
        JLabel titleLabel = new JLabel("Tic Tac Toe (Player vs Computer)");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titlePanel.add(titleLabel);
        
        // Main game panel
        JPanel gamePanel = new JPanel();
        gamePanel.setLayout(new GridLayout(3, 3, 5, 5));
        gamePanel.setBackground(new Color(70, 130, 180));
        gamePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        buttons = new JButton[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton("");
                buttons[i][j].setFont(new Font("Arial", Font.BOLD, 60));
                buttons[i][j].setFocusPainted(false);
                buttons[i][j].setBackground(Color.WHITE);
                buttons[i][j].setForeground(new Color(70, 130, 180));
                buttons[i][j].setOpaque(true);
                buttons[i][j].setBorder(BorderFactory.createLineBorder(new Color(70, 130, 180), 2));
                buttons[i][j].addActionListener(new ButtonClickListener(i, j));
                gamePanel.add(buttons[i][j]);
            }
        }

        // Leaderboard panel
        JPanel leaderboardPanel = new JPanel();
        leaderboardPanel.setLayout(new BoxLayout(leaderboardPanel, BoxLayout.Y_AXIS));
        leaderboardPanel.setBackground(new Color(100, 149, 237));
        leaderboardPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 2, 0, 0, Color.WHITE),
            BorderFactory.createEmptyBorder(15, 15, 15, 15)
        ));
        
        JLabel leaderboardTitle = new JLabel("Scoreboard");
        leaderboardTitle.setFont(new Font("Arial", Font.BOLD, 18));
        leaderboardTitle.setForeground(Color.WHITE);
        leaderboardTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        xScoreLabel = new JLabel("You (X): 0 wins");
        xScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        xScoreLabel.setForeground(Color.WHITE);
        xScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        oScoreLabel = new JLabel("Computer (O): 0 wins");
        oScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        oScoreLabel.setForeground(Color.WHITE);
        oScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        leaderboardPanel.add(leaderboardTitle);
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        leaderboardPanel.add(xScoreLabel);
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        leaderboardPanel.add(oScoreLabel);

        // Main content panel
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(gamePanel, BorderLayout.CENTER);
        contentPanel.add(leaderboardPanel, BorderLayout.EAST);

        frame.setLayout(new BorderLayout());
        frame.add(titlePanel, BorderLayout.NORTH);
        frame.add(contentPanel, BorderLayout.CENTER);
        
        frame.setSize(650, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
    }

    private class ButtonClickListener implements ActionListener {
        private int row;
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!gameEnded && buttons[row][col].getText().equals("") && currentPlayer == 'X') {
                makeMove(row, col);
                
                if (!gameEnded && currentPlayer == 'O') {
                    // Use javax.swing.Timer explicitly
                    javax.swing.Timer timer = new javax.swing.Timer(500, ev -> computerMove());
                    timer.setRepeats(false);
                    timer.start();
                }
            }
        }
    }

    private void makeMove(int row, int col) {
        buttons[row][col].setText(String.valueOf(currentPlayer));
        buttons[row][col].setEnabled(false);
        
        if (checkWinner(row, col)) {
            gameEnded = true;
            scores.put(currentPlayer, scores.get(currentPlayer) + 1);
            updateLeaderboard();
            String message = currentPlayer == 'X' ? "Congratulations! You win!" : "Computer wins! Try again!";
            JOptionPane.showMessageDialog(frame, message, "Game Over", JOptionPane.INFORMATION_MESSAGE);
            askPlayAgain();
        } else if (isBoardFull()) {
            gameEnded = true;
            JOptionPane.showMessageDialog(frame, "It's a draw!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
            askPlayAgain();
        } else {
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
    }

    private void computerMove() {
        // 1. First check if computer can win immediately
        Point winningMove = findWinningMove('O');
        if (winningMove != null) {
            makeMove(winningMove.x, winningMove.y);
            return;
        }

        // 2. Check if player is about to win and block them
        Point blockingMove = findWinningMove('X');
        if (blockingMove != null) {
            makeMove(blockingMove.x, blockingMove.y);
            return;
        }

        // 3. Make strategic move
        Point bestMove = findBestMove();
        if (bestMove != null) {
            makeMove(bestMove.x, bestMove.y);
        }
    }

    private Point findWinningMove(char player) {
        // Check all rows
        for (int i = 0; i < 3; i++) {
            if (buttons[i][0].getText().equals(String.valueOf(player)) 
                && buttons[i][1].getText().equals(String.valueOf(player)) 
                && buttons[i][2].getText().equals("")) {
                return new Point(i, 2);
            }
            if (buttons[i][0].getText().equals(String.valueOf(player)) 
                && buttons[i][2].getText().equals(String.valueOf(player)) 
                && buttons[i][1].getText().equals("")) {
                return new Point(i, 1);
            }
            if (buttons[i][1].getText().equals(String.valueOf(player)) 
                && buttons[i][2].getText().equals(String.valueOf(player)) 
                && buttons[i][0].getText().equals("")) {
                return new Point(i, 0);
            }
        }

        // Check all columns
        for (int j = 0; j < 3; j++) {
            if (buttons[0][j].getText().equals(String.valueOf(player)) 
                && buttons[1][j].getText().equals(String.valueOf(player)) 
                && buttons[2][j].getText().equals("")) {
                return new Point(2, j);
            }
            if (buttons[0][j].getText().equals(String.valueOf(player)) 
                && buttons[2][j].getText().equals(String.valueOf(player)) 
                && buttons[1][j].getText().equals("")) {
                return new Point(1, j);
            }
            if (buttons[1][j].getText().equals(String.valueOf(player)) 
                && buttons[2][j].getText().equals(String.valueOf(player)) 
                && buttons[0][j].getText().equals("")) {
                return new Point(0, j);
            }
        }

        // Check diagonals
        if (buttons[0][0].getText().equals(String.valueOf(player)) 
            && buttons[1][1].getText().equals(String.valueOf(player)) 
            && buttons[2][2].getText().equals("")) {
            return new Point(2, 2);
        }
        if (buttons[0][0].getText().equals(String.valueOf(player)) 
            && buttons[2][2].getText().equals(String.valueOf(player)) 
            && buttons[1][1].getText().equals("")) {
            return new Point(1, 1);
        }
        if (buttons[1][1].getText().equals(String.valueOf(player)) 
            && buttons[2][2].getText().equals(String.valueOf(player)) 
            && buttons[0][0].getText().equals("")) {
            return new Point(0, 0);
        }

        if (buttons[0][2].getText().equals(String.valueOf(player)) 
            && buttons[1][1].getText().equals(String.valueOf(player)) 
            && buttons[2][0].getText().equals("")) {
            return new Point(2, 0);
        }
        if (buttons[0][2].getText().equals(String.valueOf(player)) 
            && buttons[2][0].getText().equals(String.valueOf(player)) 
            && buttons[1][1].getText().equals("")) {
            return new Point(1, 1);
        }
        if (buttons[1][1].getText().equals(String.valueOf(player)) 
            && buttons[2][0].getText().equals(String.valueOf(player)) 
            && buttons[0][2].getText().equals("")) {
            return new Point(0, 2);
        }

        return null;
    }

    private Point findBestMove() {
        // Priority 1: Take center if available
        if (buttons[1][1].getText().equals("")) {
            return new Point(1, 1);
        }

        // Priority 2: Take a corner if available
        List<Point> corners = Arrays.asList(
            new Point(0, 0), new Point(0, 2),
            new Point(2, 0), new Point(2, 2)
        );
        Collections.shuffle(corners);
        for (Point corner : corners) {
            if (buttons[corner.x][corner.y].getText().equals("")) {
                return corner;
            }
        }

        // Priority 3: Take any available edge
        List<Point> edges = Arrays.asList(
            new Point(0, 1), new Point(1, 0),
            new Point(1, 2), new Point(2, 1)
        );
        Collections.shuffle(edges);
        for (Point edge : edges) {
            if (buttons[edge.x][edge.y].getText().equals("")) {
                return edge;
            }
        }

        return null;
    }

    private void updateLeaderboard() {
        xScoreLabel.setText("You (X): " + scores.get('X') + " wins");
        oScoreLabel.setText("Computer (O): " + scores.get('O') + " wins");
    }

    private boolean checkWinner(int row, int col) {
        // Check row
        if (buttons[row][0].getText().equals(String.valueOf(currentPlayer)) 
            && buttons[row][1].getText().equals(String.valueOf(currentPlayer)) 
            && buttons[row][2].getText().equals(String.valueOf(currentPlayer))) {
            highlightWinningCells(new Point(row, 0), new Point(row, 1), new Point(row, 2));
            return true;
        }

        // Check column
        if (buttons[0][col].getText().equals(String.valueOf(currentPlayer)) 
            && buttons[1][col].getText().equals(String.valueOf(currentPlayer)) 
            && buttons[2][col].getText().equals(String.valueOf(currentPlayer))) {
            highlightWinningCells(new Point(0, col), new Point(1, col), new Point(2, col));
            return true;
        }

        // Check diagonals
        if (row == col) {
            if (buttons[0][0].getText().equals(String.valueOf(currentPlayer)) 
                && buttons[1][1].getText().equals(String.valueOf(currentPlayer)) 
                && buttons[2][2].getText().equals(String.valueOf(currentPlayer))) {
                highlightWinningCells(new Point(0, 0), new Point(1, 1), new Point(2, 2));
                return true;
            }
        }

        if (row + col == 2) {
            if (buttons[0][2].getText().equals(String.valueOf(currentPlayer)) 
                && buttons[1][1].getText().equals(String.valueOf(currentPlayer)) 
                && buttons[2][0].getText().equals(String.valueOf(currentPlayer))) {
                highlightWinningCells(new Point(0, 2), new Point(1, 1), new Point(2, 0));
                return true;
            }
        }

        return false;
    }

    private void highlightWinningCells(Point... cells) {
        for (Point cell : cells) {
            buttons[cell.x][cell.y].setBackground(new Color(144, 238, 144));
        }
    }

    private boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j].getText().equals("")) {
                    return false;
                }
            }
        }
        return true;
    }

    private void askPlayAgain() {
        int response = JOptionPane.showConfirmDialog(frame, "Would you like to play again?", "Game Over", 
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            resetBoard();
        } else {
            frame.dispose();
        }
    }

    private void resetBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
                buttons[i][j].setBackground(Color.WHITE);
            }
        }
        currentPlayer = 'X';
        gameEnded = false;
    }
}
