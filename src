import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;

public class TicTacToeGUI {

    private JFrame frame;
    private JButton[][] buttons;
    private char currentPlayer;
    private boolean gameEnded;
    private Map<Character, Integer> scores;
    private JLabel xScoreLabel;
    private JLabel oScoreLabel;

    public static void main(String[] args) {
        EventQueue.invokeLater(() -> {
            try {
                TicTacToeGUI window = new TicTacToeGUI();
                window.frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public TicTacToeGUI() {
        currentPlayer = 'X';
        gameEnded = false;
        scores = new HashMap<>();
        scores.put('X', 0);
        scores.put('O', 0);
        initialize();
    }

    private void initialize() {
        frame = new JFrame();
        frame.setTitle(" "); // Empty title since we'll use our own
        
        // Create a custom title panel
        JPanel titlePanel = new JPanel();
        titlePanel.setBackground(new Color(21, 230, 255));
        titlePanel.setBorder(BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE)); // White bottom border
        JLabel titleLabel = new JLabel("TicTacToe Game");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 24));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titlePanel.add(titleLabel);
        
        // Main game panel
        JPanel gamePanel = new JPanel();
        gamePanel.setLayout(new GridLayout(3, 3, 0, 0));
        gamePanel.setBackground(new Color(0, 51, 102));

        buttons = new JButton[3][3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton("");
                buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 60));
                buttons[i][j].setFocusPainted(false);
                buttons[i][j].setBackground(new Color(68, 50, 102));
                buttons[i][j].setOpaque(true);
                buttons[i][j].setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
                buttons[i][j].addActionListener(new ButtonClickListener(i, j));
                gamePanel.add(buttons[i][j]);
            }
        }

        // Leaderboard panel
        JPanel leaderboardPanel = new JPanel();
        leaderboardPanel.setLayout(new BoxLayout(leaderboardPanel, BoxLayout.Y_AXIS));
        leaderboardPanel.setBackground(new Color(102, 178, 255)); // New light blue color
        leaderboardPanel.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createMatteBorder(0, 2, 0, 0, Color.WHITE), // Left white border
            BorderFactory.createEmptyBorder(10, 10, 10, 10)
        ));
        
        JLabel leaderboardTitle = new JLabel("Leaderboard");
        leaderboardTitle.setFont(new Font("Arial", Font.BOLD, 18));
        leaderboardTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        xScoreLabel = new JLabel("Player X: 0 wins");
        xScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        xScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        oScoreLabel = new JLabel("Player O: 0 wins");
        oScoreLabel.setFont(new Font("Arial", Font.BOLD, 16));
        oScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        leaderboardPanel.add(leaderboardTitle);
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        leaderboardPanel.add(xScoreLabel);
        leaderboardPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        leaderboardPanel.add(oScoreLabel);

        // Main content panel that holds game and leaderboard
        JPanel contentPanel = new JPanel(new BorderLayout());
        contentPanel.add(gamePanel, BorderLayout.CENTER);
        contentPanel.add(leaderboardPanel, BorderLayout.EAST);

        // Set up the main frame layout
        frame.setLayout(new BorderLayout());
        frame.add(titlePanel, BorderLayout.NORTH);
        frame.add(contentPanel, BorderLayout.CENTER);
        
        frame.setSize(600, 450); // Wider to accommodate leaderboard
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    // [Rest of the methods remain unchanged...]
    private class ButtonClickListener implements ActionListener {
        private int row;
        private int col;

        public ButtonClickListener(int row, int col) {
            this.row = row;
            this.col = col;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!gameEnded && buttons[row][col].getText().equals("")) {
                buttons[row][col].setText(String.valueOf(currentPlayer));
                buttons[row][col].setEnabled(false);
                if (checkWinner(row, col)) {
                    gameEnded = true;
                    scores.put(currentPlayer, scores.get(currentPlayer) + 1);
                    updateLeaderboard();
                    JOptionPane.showMessageDialog(frame, "Player " + currentPlayer + " wins!");
                    askPlayAgain();
                } else if (isBoardFull()) {
                    gameEnded = true;
                    JOptionPane.showMessageDialog(frame, "It's a draw!");
                    askPlayAgain();
                } else {
                    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
                }
            }
        }
    }

    private void updateLeaderboard() {
        xScoreLabel.setText("Player X: " + scores.get('X') + " wins");
        oScoreLabel.setText("Player O: " + scores.get('O') + " wins");
    }

    private boolean checkWinner(int row, int col) {
        // Check row
        if (buttons[row][0].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[row][1].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[row][2].getText().equals(String.valueOf(currentPlayer))) {
            return true;
        }

        // Check column
        if (buttons[0][col].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[1][col].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[2][col].getText().equals(String.valueOf(currentPlayer))) {
            return true;
        }

        // Check diagonals
        if (buttons[0][0].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[1][1].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[2][2].getText().equals(String.valueOf(currentPlayer))) {
            return true;
        }
        if (buttons[0][2].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[1][1].getText().equals(String.valueOf(currentPlayer)) &&
            buttons[2][0].getText().equals(String.valueOf(currentPlayer))) {
            return true;
        }

        return false;
    }

    private boolean isBoardFull() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j].getText().equals("")) {
                    return false;
                }
            }
        }
        return true;
    }

    private void askPlayAgain() {
        int response = JOptionPane.showConfirmDialog(frame, "Do you want to play again?", "Play Again",
                JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            resetBoard();
        } else {
            frame.dispose();
        }
    }

    private void resetBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
                buttons[i][j].setBackground(new Color(68, 50, 102));
            }
        }
        currentPlayer = 'X';
        gameEnded = false;
    }
}
